// Copyright (c) 2024 radio core authors
//
// SPDX-License-Identifier: MIT

#include "radio_core/math/dft.h"

#include <array>

#include "radio_core/math/complex.h"
#include "radio_core/math/unittest/complex_matchers.h"
#include "radio_core/unittest/mock.h"
#include "radio_core/unittest/test.h"

namespace radio_core {

namespace {

using testing::ComplexNear;
using testing::Pointwise;

// Samples are generated using
// - numpy version: 2.1.3
// - scipy version : 1.14.1
//
// >>> import numpy as np
// >>> import scipy
// >>> num_samples = 64
// >>> prng = np.random.RandomState(1234567890)
// >>> shape = (num_samples,)
// >>> samples = (
// >>>     prng.uniform(-1, 1, shape)
// >>>     + 1.0j * prng.uniform(-1, 1, shape)
// >>>     + np.sin(np.linspace(0, 100 * np.pi, num=num_samples))
// >>> )
// >>> print("constexpr auto kSimpleSamples = std::to_array<Complex>({")
// >>> for x in samples:
// >>>     print(f"  {{{x.real}f, {x.imag}f}},")
// >>> print("});")
constexpr auto kSimpleSamples = std::to_array<Complex>({
    {0.23758954317135994f, 0.49112104601852935f},
    {-0.7793769914305188f, 0.2943265008227709f},
    {0.25593197470949514f, 0.5515070582724537f},
    {1.4634823380021356f, 0.29198507388809514f},
    {0.8050067728712013f, -0.6622836779267023f},
    {0.3582300185192949f, -0.030290401488783925f},
    {-1.463076261081905f, 0.07688495286708874f},
    {0.6501922864559098f, 0.9938069860115768f},
    {0.8921277865239048f, -0.5268585234333985f},
    {0.856874701901135f, -0.9176182421003238f},
    {-0.586436034912329f, -0.06996962983402821f},
    {-0.5814276365163286f, -0.28521988934007014f},
    {-0.33867108570059246f, -0.5399466992165696f},
    {1.811487347835572f, 0.06841582396062407f},
    {-0.29570463884804055f, 0.43278950420867424f},
    {-1.2912701599040184f, 0.6371497274943996f},
    {-1.781972830398353f, 0.4798868472792053f},
    {-0.10310962637253887f, -0.8410232629251475f},
    {0.4439223724625576f, 0.5137655214688006f},
    {0.9731244907932848f, -0.7351961368443838f},
    {-0.41230955365548727f, -0.030688474686993095f},
    {-0.48605175431464354f, -0.5875049354391559f},
    {-0.424974231961192f, -0.9540344706159993f},
    {1.752531470306818f, 0.0851574629500369f},
    {0.18942146215859212f, 0.36246460902040845f},
    {-0.6826038394419608f, -0.2822506393984239f},
    {-0.7022245108725401f, -0.27407705088872936f},
    {0.6876648577095961f, 0.3473679412085542f},
    {0.6821962933348985f, -0.40988540670108353f},
    {-0.37623719259802413f, 0.3311776980567458f},
    {-1.780912642541339f, 0.8730450477607203f},
    {-1.244993005539183f, -0.2648974002251161f},
    {1.263792914747797f, 0.8357537474637013f},
    {1.9060701938860438f, 0.5184540638855042f},
    {-0.8730458604101661f, -0.026638654882540802f},
    {-0.7078794549581569f, -0.08064220728757765f},
    {0.027250135590695557f, 0.09218660674885237f},
    {1.5162036803173924f, -0.22726996775171138f},
    {0.8944459981906613f, -0.0687737808848301f},
    {0.03499827818967455f, 0.8068472525958048f},
    {-0.5155030099101753f, 0.944942148038727f},
    {0.6349195312630732f, -0.03967042199901427f},
    {1.2684879687931647f, -0.3090546029513854f},
    {0.3065539150576847f, -0.9218935005000872f},
    {0.044433396443027406f, -0.7461951049076365f},
    {-0.4230502965036731f, -0.7460064537200695f},
    {-0.31013561178668486f, -0.5500240109237631f},
    {1.7383086852804546f, 0.8822874493546276f},
    {0.22497631448413058f, 0.18127526942057393f},
    {0.079388861464055f, -0.7888141659106422f},
    {-0.37354867967790295f, 0.6523428256012451f},
    {0.3759097934770005f, -0.639999743261717f},
    {0.8696573381979557f, 0.6837597762119147f},
    {1.226705561175708f, -0.47235715455484106f},
    {-0.24265216840890635f, 0.004082947247309843f},
    {-0.7906668850667592f, -0.6524740315708635f},
    {-0.569114877263477f, 0.2912307280541211f},
    {1.1464760218623007f, -0.43961224022914047f},
    {-0.17421373129753231f, -0.8482438451798844f},
    {-1.0654375514882197f, 0.4864032748185312f},
    {-1.2495365172909545f, -0.5273516717605868f},
    {-0.41381438262203374f, 0.6014394340304754f},
    {0.04595197053899247f, -0.7324293215146884f},
    {0.4621860638895154f, 0.5098580242557222f},
});

}  // namespace

TEST(DFT, CalculateDFTBinNaive) {
  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[0])
  // (0.07947733307549136-0.02980438081000146j)
  EXPECT_THAT(
      CalculateDFTBinNaive<float>(kSimpleSamples, 0),
      ComplexNear(Complex(0.07947733307549136f, -0.02980438081000146f), 1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[1])
  // (-0.014407815155715296+0.05006039075493518j)
  EXPECT_THAT(CalculateDFTBinNaive<float>(kSimpleSamples, 1),
              ComplexNear(Complex(-0.014407815155715296f, 0.05006039075493518f),
                          1e-6f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[31])
  // (0.012031196737491683-0.09528264753642554j)
  EXPECT_THAT(CalculateDFTBinNaive<float>(kSimpleSamples, 31),
              ComplexNear(Complex(0.012031196737491683f, -0.09528264753642554f),
                          1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[32])
  // (-0.2028785831942147+0.03576012172792265j)
  EXPECT_THAT(
      CalculateDFTBinNaive<float>(kSimpleSamples, 32),
      ComplexNear(Complex(-0.2028785831942147f, 0.03576012172792265f), 1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[63])
  // (-0.03229625028059946-0.09105716778952469j)
  EXPECT_THAT(
      CalculateDFTBinNaive<float>(kSimpleSamples, 63),
      ComplexNear(Complex(-0.03229625028059946, -0.09105716778952469f), 1e-5f));
}

TEST(DFT, CalculateDFTBinGoertzel) {
  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[0])
  // (0.07947733307549136-0.02980438081000146j)
  EXPECT_THAT(
      CalculateDFTBinGoertzel<float>(kSimpleSamples, 0),
      ComplexNear(Complex(0.07947733307549136f, -0.02980438081000146f), 1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[1])
  // (-0.014407815155715296+0.05006039075493518j)
  EXPECT_THAT(CalculateDFTBinGoertzel<float>(kSimpleSamples, 1),
              ComplexNear(Complex(-0.014407815155715296f, 0.05006039075493518f),
                          1e-6f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[31])
  // (0.012031196737491683-0.09528264753642554j)
  EXPECT_THAT(CalculateDFTBinGoertzel<float>(kSimpleSamples, 31),
              ComplexNear(Complex(0.012031196737491683f, -0.09528264753642554f),
                          1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[32])
  // (-0.2028785831942147+0.03576012172792265j)
  EXPECT_THAT(
      CalculateDFTBinGoertzel<float>(kSimpleSamples, 32),
      ComplexNear(Complex(-0.2028785831942147f, 0.03576012172792265f), 1e-5f));

  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> print(dft[63])
  // (-0.03229625028059946-0.09105716778952469j)
  EXPECT_THAT(
      CalculateDFTBinGoertzel<float>(kSimpleSamples, 63),
      ComplexNear(Complex(-0.03229625028059946, -0.09105716778952469f), 1e-5f));
}

TEST(DFT, CalculateMultipleDFTBinsGoertzel) {
  // >>> m = scipy.linalg.dft(num_samples)
  // >>> dft = (samples @ m) / num_samples
  // >>> for i in [0, 1, 2, 3, 31, 32, 33, 34, 35, 61, 62, 63]:
  // ...     print(dft[i])
  // (0.07947733307549136-0.02980438081000146j)
  // (-0.014407815155715296+0.05006039075493518j)
  // (0.0075523305624986305-0.005597310636749439j)
  // (0.01822684429966189-0.11225639742980004j)
  // (0.012031196737491683-0.09528264753642554j)
  // (-0.2028785831942147+0.03576012172792265j)
  // (-0.027666451826504308-0.011778676677530943j)
  // (0.01663719690078352-0.09250764134601784j)
  // (0.029832827009134977-0.05579896483127814j)
  // (0.04149480978071162+0.04905582586238337j)
  // (-0.04414432636955623+0.1826809699808777j)
  // (-0.03229625028059946-0.09105716778952469j)
  //
  // The DFT from above is duplicated twice to allow testing wider register
  // implementations.
  std::vector<Complex> dft(32);
  // clang-format off
  EXPECT_THAT(CalculateMultipleDFTBinsGoertzel<float>(
                  kSimpleSamples,
                  {{
                    // Iteration 1.
                    0, 1, 2, 3, 31, 32, 33, 34, 35, 61, 62, 63,
                    // Iteration 2.
                    0, 1, 2, 3, 31, 32, 33, 34, 35, 61, 62, 63}},
                  dft),
              Pointwise(ComplexNear(1e-5f),
                        std::to_array<Complex>({
                            // Iteration 1.
                            {0.07947733307549136, -0.02980438081000146},
                            {-0.014407815155715296, 0.05006039075493518},
                            {0.0075523305624986305, -0.005597310636749439},
                            {0.01822684429966189, -0.11225639742980004},
                            {0.012031196737491683, -0.09528264753642554},
                            {-0.2028785831942147, 0.03576012172792265},
                            {-0.027666451826504308, -0.011778676677530943},
                            {0.01663719690078352, -0.09250764134601784},
                            {0.029832827009134977, -0.05579896483127814},
                            {0.04149480978071162, 0.04905582586238337},
                            {-0.04414432636955623, 0.1826809699808777},
                            {-0.03229625028059946, -0.09105716778952469},
                            // Iteration 2.
                            {0.07947733307549136, -0.02980438081000146},
                            {-0.014407815155715296, 0.05006039075493518},
                            {0.0075523305624986305, -0.005597310636749439},
                            {0.01822684429966189, -0.11225639742980004},
                            {0.012031196737491683, -0.09528264753642554},
                            {-0.2028785831942147, 0.03576012172792265},
                            {-0.027666451826504308, -0.011778676677530943},
                            {0.01663719690078352, -0.09250764134601784},
                            {0.029832827009134977, -0.05579896483127814},
                            {0.04149480978071162, 0.04905582586238337},
                            {-0.04414432636955623, 0.1826809699808777},
                            {-0.03229625028059946, -0.09105716778952469},
                      })));
  // clang-format on
}

}  // namespace radio_core
