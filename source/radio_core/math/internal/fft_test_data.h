// Copyright (c) 2025 radio core authors
//
// SPDX-License-Identifier: MIT

#pragma once

#include <array>

#include <radio_core/math/complex.h>

namespace radio_core::fft::test {

// 64 floating point samples.
struct FloatSignal64 {
  // >>> import numpy as np
  // >>> import scipy
  // >>> num_samples = 64
  // >>> prng = np.random.RandomState(1234567890)
  // >>> shape = (num_samples,)
  // >>> samples = (
  // >>>   prng.uniform(-1, 1, shape)
  // >>>   + np.sin(np.linspace(0, 100 * np.pi, num=num_samples))
  // >>> )
  // >>> print("static constexpr auto kInput = std::to_array<Complex>({")
  // >>> for x in samples:
  // >>>   print(f"  {{{x.real}f, {x.imag}f}},")
  // >>> print("});")
  alignas(16) static constexpr auto kInput = std::to_array<float>({
      0.23758954317135994f,  -0.7793769914305188f,  0.25593197470949514f,
      1.4634823380021356f,   0.8050067728712013f,   0.3582300185192949f,
      -1.463076261081905f,   0.6501922864559098f,   0.8921277865239048f,
      0.856874701901135f,    -0.586436034912329f,   -0.5814276365163286f,
      -0.33867108570059246f, 1.811487347835572f,    -0.29570463884804055f,
      -1.2912701599040184f,  -1.781972830398353f,   -0.10310962637253887f,
      0.4439223724625576f,   0.9731244907932848f,   -0.41230955365548727f,
      -0.48605175431464354f, -0.424974231961192f,   1.752531470306818f,
      0.18942146215859212f,  -0.6826038394419608f,  -0.7022245108725401f,
      0.6876648577095961f,   0.6821962933348985f,   -0.37623719259802413f,
      -1.780912642541339f,   -1.244993005539183f,   1.263792914747797f,
      1.9060701938860438f,   -0.8730458604101661f,  -0.7078794549581569f,
      0.027250135590695557f, 1.5162036803173924f,   0.8944459981906613f,
      0.03499827818967455f,  -0.5155030099101753f,  0.6349195312630732f,
      1.2684879687931647f,   0.3065539150576847f,   0.044433396443027406f,
      -0.4230502965036731f,  -0.31013561178668486f, 1.7383086852804546f,
      0.22497631448413058f,  0.079388861464055f,    -0.37354867967790295f,
      0.3759097934770005f,   0.8696573381979557f,   1.226705561175708f,
      -0.24265216840890635f, -0.7906668850667592f,  -0.569114877263477f,
      1.1464760218623007f,   -0.17421373129753231f, -1.0654375514882197f,
      -1.2495365172909545f,  -0.41381438262203374f, 0.04595197053899247f,
      0.4621860638895154f,
  });

  // Expected output for the input from above.
  // >>> from scipy import fft
  // >>> fft_result = fft.rfft(samples)
  // >>> print("static constexpr auto kOutput = std::to_array<Complex>({")
  // >>> for x in fft_result:
  // >>>     print(f"  {{{x.real}f, {x.imag}f}},")
  // >>> print("});")
  alignas(16) static constexpr auto kOutput = std::to_array<Complex>({
      {5.086549316831447f, 0.0f},
      {-1.4945300939621067f, 4.515761873422627f},
      {-1.1709438658257825f, -6.024904979764105f},
      {1.9110929305719324f, -5.161991145349824f},
      {-3.4189963091507325f, -7.5261309863029995f},
      {2.9714377360237227f, 1.4145306538377729f},
      {3.8280535337358f, -1.9692444925440635f},
      {0.6996705182679024f, -1.6492210572243535f},
      {-0.695686504220797f, -2.8259395879423397f},
      {-2.05066533873196f, 3.3862525442529976f},
      {4.124091444664683f, -1.564625076559238f},
      {-0.8473146118866064f, -1.182660846000859f},
      {-0.7916765876665013f, 2.4021252960533213f},
      {-19.42115890303077f, 25.253019981522424f},
      {9.02839296243239f, -2.042888867694968f},
      {-3.3410658404235725f, 2.545638469764574f},
      {4.68752817040819f, -3.5088343492517744f},
      {0.1784061181125387f, -0.7355052125039158f},
      {1.7060435201646538f, -1.0713056220313768f},
      {4.1042543141122145f, 3.280901211791825f},
      {2.746950862903221f, -0.8364820869261845f},
      {-4.464002289928176f, 2.2479257172576625f},
      {0.5422684729601748f, -1.420969583587361f},
      {0.38058605737177564f, 4.279927781075131f},
      {-0.27773244833313304f, 2.845922581443983f},
      {1.5901325070727135f, -0.8603896875597243f},
      {3.4511499255424676f, -3.018008014059952f},
      {1.4873418937821767f, 3.2522230458172348f},
      {1.2535403558983722f, -2.1600079444105598f},
      {2.3768892202736644f, -0.41771915972102125f},
      {2.9579757969926486f, -0.19519521483936497f},
      {-0.5003281628484454f, -2.672127067484638f},
      {-12.984229324429734f, 0.0f},
  });
};

// 64 complex samples.
struct ComplexSignal64 {
  // Samples are generated using
  // - numpy version: 2.1.3
  // - scipy version : 1.14.1
  //
  // >>> import numpy as np
  // >>> import scipy
  // >>> num_samples = 64
  // >>> prng = np.random.RandomState(1234567890)
  // >>> shape = (num_samples,)
  // >>> samples = (
  // >>>     prng.uniform(-1, 1, shape)
  // >>>     + 1.0j * prng.uniform(-1, 1, shape)
  // >>>     + np.sin(np.linspace(0, 100 * np.pi, num=num_samples))
  // >>> )
  // >>> print("static constexpr auto kInput = std::to_array<Complex>({")
  // >>> for x in samples:
  // >>>     print(f"  {{{x.real}f, {x.imag}f}},")
  // >>> print("});")
  alignas(16) static constexpr auto kInput = std::to_array<Complex>({
      {0.23758954317135994f, 0.49112104601852935f},
      {-0.7793769914305188f, 0.2943265008227709f},
      {0.25593197470949514f, 0.5515070582724537f},
      {1.4634823380021356f, 0.29198507388809514f},
      {0.8050067728712013f, -0.6622836779267023f},
      {0.3582300185192949f, -0.030290401488783925f},
      {-1.463076261081905f, 0.07688495286708874f},
      {0.6501922864559098f, 0.9938069860115768f},
      {0.8921277865239048f, -0.5268585234333985f},
      {0.856874701901135f, -0.9176182421003238f},
      {-0.586436034912329f, -0.06996962983402821f},
      {-0.5814276365163286f, -0.28521988934007014f},
      {-0.33867108570059246f, -0.5399466992165696f},
      {1.811487347835572f, 0.06841582396062407f},
      {-0.29570463884804055f, 0.43278950420867424f},
      {-1.2912701599040184f, 0.6371497274943996f},
      {-1.781972830398353f, 0.4798868472792053f},
      {-0.10310962637253887f, -0.8410232629251475f},
      {0.4439223724625576f, 0.5137655214688006f},
      {0.9731244907932848f, -0.7351961368443838f},
      {-0.41230955365548727f, -0.030688474686993095f},
      {-0.48605175431464354f, -0.5875049354391559f},
      {-0.424974231961192f, -0.9540344706159993f},
      {1.752531470306818f, 0.0851574629500369f},
      {0.18942146215859212f, 0.36246460902040845f},
      {-0.6826038394419608f, -0.2822506393984239f},
      {-0.7022245108725401f, -0.27407705088872936f},
      {0.6876648577095961f, 0.3473679412085542f},
      {0.6821962933348985f, -0.40988540670108353f},
      {-0.37623719259802413f, 0.3311776980567458f},
      {-1.780912642541339f, 0.8730450477607203f},
      {-1.244993005539183f, -0.2648974002251161f},
      {1.263792914747797f, 0.8357537474637013f},
      {1.9060701938860438f, 0.5184540638855042f},
      {-0.8730458604101661f, -0.026638654882540802f},
      {-0.7078794549581569f, -0.08064220728757765f},
      {0.027250135590695557f, 0.09218660674885237f},
      {1.5162036803173924f, -0.22726996775171138f},
      {0.8944459981906613f, -0.0687737808848301f},
      {0.03499827818967455f, 0.8068472525958048f},
      {-0.5155030099101753f, 0.944942148038727f},
      {0.6349195312630732f, -0.03967042199901427f},
      {1.2684879687931647f, -0.3090546029513854f},
      {0.3065539150576847f, -0.9218935005000872f},
      {0.044433396443027406f, -0.7461951049076365f},
      {-0.4230502965036731f, -0.7460064537200695f},
      {-0.31013561178668486f, -0.5500240109237631f},
      {1.7383086852804546f, 0.8822874493546276f},
      {0.22497631448413058f, 0.18127526942057393f},
      {0.079388861464055f, -0.7888141659106422f},
      {-0.37354867967790295f, 0.6523428256012451f},
      {0.3759097934770005f, -0.639999743261717f},
      {0.8696573381979557f, 0.6837597762119147f},
      {1.226705561175708f, -0.47235715455484106f},
      {-0.24265216840890635f, 0.004082947247309843f},
      {-0.7906668850667592f, -0.6524740315708635f},
      {-0.569114877263477f, 0.2912307280541211f},
      {1.1464760218623007f, -0.43961224022914047f},
      {-0.17421373129753231f, -0.8482438451798844f},
      {-1.0654375514882197f, 0.4864032748185312f},
      {-1.2495365172909545f, -0.5273516717605868f},
      {-0.41381438262203374f, 0.6014394340304754f},
      {0.04595197053899247f, -0.7324293215146884f},
      {0.4621860638895154f, 0.5098580242557222f},
  });

  // Expected output for the input from above.
  // >>> from scipy import fft
  // >>> fft_result = fft.fft(samples)
  // >>> print("static constexpr auto kOutput = std::to_array<Complex>({")
  // >>> for x in fft_result:
  // >>>     print(f"  {{{x.real}f, {x.imag}f}},")
  // >>> print("});")
  alignas(16) static constexpr auto kOutput = std::to_array<Complex>({
      {5.086549316831447f, -1.9074803718400941f},
      {-0.9221001699657798f, 3.2038650083158497f},
      {0.483349155999915f, -0.35822788075196454f},
      {1.166518035178358f, -7.184409435507202f},
      {-1.5942542249637581f, -2.0837038916566772f},
      {6.103858044175443f, 6.381541715699684f},
      {1.4974195911385284f, -4.917774038741505f},
      {1.8359224188502727f, -4.963913567622596f},
      {-3.8081344783874775f, 4.567102649756786f},
      {-2.977201491430292f, 1.9033348128971397f},
      {9.003966192508095f, 0.2974061677648763f},
      {1.3475964141323882f, 1.9606121604071554f},
      {-0.31313035876077466f, 0.1892767160285721f},
      {-17.513587975656755f, 25.90460161364168f},
      {14.164605403843808f, -3.460829576199979f},
      {-2.283991743436879f, 0.2941773997800897f},
      {-0.331616477900476f, -1.8605956193791549f},
      {-3.6867250239799394f, -1.3019923918354317f},
      {1.69221709171594f, 0.9857019421076747f},
      {0.49199975781236027f, 6.889266882180568f},
      {4.688607856775053f, -2.670771943369751f},
      {-6.739825555215181f, 0.9351723015901015f},
      {6.633585651250669f, -0.024910304137574668f},
      {-2.546993430991723f, 3.9313811818121915f},
      {-5.606361929422652f, 5.853321391946202f},
      {0.8115315634188457f, 0.35579146609048506f},
      {5.836005757015695f, 1.8080727289615284f},
      {-3.430678242055478f, 4.17767624330053f},
      {-4.684019246680341f, 0.1097351914200404f},
      {2.844477511962744f, -4.406572068643863f},
      {4.8511709923352395f, -6.310879475823873f},
      {0.7699965911994454f, -6.098089442331217f},
      {-12.984229324429734f, 2.288647790587107f},
      {-1.7706529168963365f, -0.7538353073619417f},
      {1.0647806016500583f, -5.920489046145141f},
      {1.909300928584587f, -3.571133749201822f},
      {7.1910999584770865f, 4.429751080241161f},
      {6.40536202961983f, -2.3267698483339414f},
      {1.0662940940692411f, 7.844088757081432f},
      {2.368733450726582f, 2.076570841209937f},
      {5.050897032756385f, 0.16147622905823678f},
      {3.3081655457352754f, -4.628474380338071f},
      {-5.549048705330318f, 2.8170288630371463f},
      {-2.188179024641173f, -3.5606791329252214f},
      {0.8052938690313877f, -0.9978077695173823f},
      {7.716508870412075f, 0.3274644585969124f},
      {1.7198699486133693f, 3.1283131861704283f},
      {4.0435372602050155f, 0.1690180331724026f},
      {9.706672818716857f, 5.157073079124394f},
      {-4.398139937410264f, -4.797099539749056f},
      {3.892180521020972f, 0.6249481591899562f},
      {-21.328729830404797f, -24.60143834940318f},
      {-1.270222816572228f, -4.614973876078071f},
      {-3.0422256379056014f, 4.325933852408875f},
      {-0.7557833031787302f, 3.4266563208833523f},
      {-1.1241291860336282f, -4.86917027560886f},
      {2.416761469945884f, 10.218981825641464f},
      {-0.4365813823144661f, -1.6654714531738863f},
      {6.158687476333071f, -0.9792850536533793f},
      {-0.1609825721279965f, 3.5524804080241377f},
      {-5.243738393337706f, 12.968558080949322f},
      {2.6556678259655064f, 3.1395728551924456f},
      {-2.8252368876514793f, 11.691582078776245f},
      {-2.066960017958434f, -5.827658738529404f},
  });
};

}  // namespace radio_core::fft::test
