Checks: >
  -*,
  readability-*,
  -readability-magic-numbers,
  -readability-implicit-bool-conversion,
  -readability-identifier-length,
  -readability-function-cognitive-complexity,
  -readability-convert-member-functions-to-static,
  -readability-uppercase-literal-suffix,
  bugprone-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-exception-escape,
  modernize-*,
  -modernize-avoid-c-arrays,
  -modernize-use-nodiscard

# Notes on the disabled checks.
#
#
# Readability
# ===========
#
# - readability-magic-numbers: it is too much of a hassle to define constant for
#   all possible values which are met in formulas.
#
# - readability-implicit-bool-conversion: comparing bitflag checks becomes too
#   verbose, i.e. (Mask & Flag) == true.
#
# - readability-identifier-length: for formulas is better to follow notation
#   from whitepapers and not invent new names.
#
# - readability-function-cognitive-complexity: it includes complexity hidden by
#   macro, making the check to be very proone to be trigerred in regression
#   tests.
#
# - readability-convert-member-functions-to-static: the check can not be aware
#   of all cases how a class is used and converting method to static based on a
#   local analysis can get in a way of actually using the object.
#
# - readability-uppercase-literal-suffix: while it is handy to use capitals for
#   integer literals (mainly, L) to not be confused with 1, the lowercase f and
#   e makes floating point values more readable.
#
#
# Bugprone
# ========
#
# - bugprone-easily-swappable-parameters: addressing the warning makes code less
#   readable.
#
# - bugprone-exception-escape: unclear how to troubleshoot and address.
#
#
# Modernize
# =========
#
# - modernize-avoid-c-arrays: for the perofmrance, cleaness of headers, and
#   interfacing with the librraies is easier and more clear to use C array.
#   Using std::array<> does not intrinsicly solve problem of C arrays due to
#   the non-checked behavior of operator[].
#
# - modernize-use-nodiscard: makes code too verbose, border line harder to
#   follow.

# WarningsAsErrors: "*"

HeaderFilterRegex: ".*"

# https://google.github.io/styleguide/cppguide.html#Naming
# https://clang.llvm.org/extra/clang-tidy/checks/readability/identifier-naming.html
CheckOptions:
  - { key: readability-identifier-naming.IgnoreMainLikeFunctions, value: 1 }
  # Type Names.
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase, value: CamelCase }
  # Variable Names.
  - { key: readability-identifier-naming.VariableCase, value: lower_case }
  - { key: readability-identifier-naming.MemberCase, value: lower_case }
  - { key: readability-identifier-naming.ClassMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberSuffix, value: _ }
  - { key: readability-identifier-naming.ProtectedMemberSuffix, value: _ }
  - { key: readability-identifier-naming.StaticVariableCase, value: lower_case }
  - { key: readability-identifier-naming.ParameterCase, value: lower_case }
  # Constant Names.
  - { key: readability-identifier-naming.GlobalConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.GlobalConstantPrefix, value: k }
  - {
      key: readability-identifier-naming.ConstexprVariableCase,
      value: CamelCase,
    }
  - { key: readability-identifier-naming.ConstexprVariablePrefix, value: k }
  - { key: readability-identifier-naming.StaticConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.StaticConstantPrefix, value: k }
  - { key: readability-identifier-naming.MemberConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.MemberConstantPrefix, value: k }
  # Function Names.
  - { key: readability-identifier-naming.FunctionCase, value: CamelCase }
  - { key: readability-identifier-naming.MethodCase, value: CamelCase }
  # Namespace Names.
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  # Enumerator Names.
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantPrefix, value: k }
  # Macro Names.
  - key: readability-identifier-naming.MacroDefinitionCase
    value: UPPER_CASE
  - key: readability-identifier-naming.MacroDefinitionIgnoredRegexp
    value: "^[A-Z]+(_[A-Z]+)*_H_$"
  # Exceptions for method names, allowing typical container methods to have
  # their expected names. The goal is to keep range-based loops and Google
  # Mock's Pointwise() to work.
  - key: readability-identifier-naming.MethodIgnoredRegexp
    value: "^(begin|end|size)$"
  # Exception for common type aliases expected by C++ containers, range loops,
  # iterators and so on.
  - key: readability-identifier-naming.TypeAliasIgnoredRegexp
    value: "^(value|type|size_type|value_type|pointer|const_pointer|reference|const_reference|iterator|const_iterator|difference_type)$"
